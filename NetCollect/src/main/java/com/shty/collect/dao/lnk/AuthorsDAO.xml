<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shty.collect.dao.lnk.AuthorsDAO">


    <resultMap id="authorsList" type="authors">
    </resultMap>
    
    
    <select id="getAuthorsByPublicationId" parameterType="Long" resultMap="authorsList">
        select id,dateCreatedTime,fullname,lnkurl,fmt_headline,imgurl,finished,peekType,referenceType,imgname from tb_linkedin_authors where publications_id = #{publicationId}
    </select>
    
    <!--执行增加操作的SQL语句。以#{name}的形式引用Student参数  
       的name属性，MyBatis将使用反射读取Student参数  
       的此属性。#{name}中name大小写敏感。引用其他  
       的gender等属性与此一致。seGeneratedKeys设置  
       为"true"表明要MyBatis获取由数据库自动生成的主  
       键；keyProperty="id"指定把获取到的主键值注入  
       到Student的id属性--> 
    <insert id="addAuthors" parameterType="Authors">
        insert into tb_linkedin_authors(dateCreatedTime,fullname,lnkurl,fmt_headline,imgurl,finished,peekType,referenceType,imgname,publications_id,people_id ) 
        values
        <foreach collection="list" item="obj" index="index" separator=",">
        ( 
        	#{obj.dateCreatedTime},
		    #{obj.fullname},
		    #{obj.lnkurl},
		    #{obj.fmt_headline},
		    #{obj.imgurl},
		    #{obj.finished},
		    #{obj.peekType},
		    #{obj.referenceType},
		    #{obj.imgname},
		    #{obj.publications_id},
		    #{obj.people_id}
        )
        </foreach>
          
        
    </insert>
    
    
   
    
    <!-- 删除数据 -->
    <delete id="deleteAuthors" parameterType="Long">
        delete from tb_linkedin_authors where people_id = #{peopleId}
    </delete>
    
    
    
    
</mapper>