<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shty.collect.dao.lnk.WebsitesDAO">


	<!-- 为了返回list 类型而定义的returnMap 
    <resultMap type="UserBaseInfo" id="UserBaseInfoList">
        <id column="auto_id" property="auto_id" />
        <result column="userId" property="userId" />
        <result column="userName" property="userName" />
    </resultMap>
	-->

	<!-- 通过id查询单条数据 -->
    <select id="getWebsites" parameterType="Long" resultType="Websites">
        select id , dateCreatedTime , webKey , webValue ,overview_id from tb_linkedin_overviewwebsites where overview_id = #{overview_id}
    </select>
    
    <!--执行增加操作的SQL语句。以#{name}的形式引用Student参数  
       的name属性，MyBatis将使用反射读取Student参数  
       的此属性。#{name}中name大小写敏感。引用其他  
       的gender等属性与此一致。seGeneratedKeys设置  
       为"true"表明要MyBatis获取由数据库自动生成的主  
       键；keyProperty="id"指定把获取到的主键值注入  
       到Student的id属性--> 
    <insert id="addWebsites" parameterType="Websites"> 
        insert into tb_linkedin_overviewwebsites(dateCreatedTime,webKey,webValue,overview_id,people_id) 
        values(#{dateCreatedTime},
        #{webKey},
        #{webValue},
        #{overview_id},
        #{people_id}
        )  
    </insert>
    
    
   
    
    <!-- 删除数据 -->
    <delete id="deleteWebsites" parameterType="Long">
        delete from tb_linkedin_overviewwebsites where people_id = #{peopleId}
    </delete>
    
    
    
</mapper>